static_resources:
  listeners:
    # ┌─────────────────────────────────────────────────────────────────────┐
    # │ 1) Listener for AuthService gRPC-Web (port 8081)                    │
    # └─────────────────────────────────────────────────────────────────────┘
    - name: auth_grpc_web_listener
      address:
        socket_address: { address: 0.0.0.0, port_value: 8081 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: grpc_web_auth
                http_filters:
                  - name: envoy.filters.http.grpc_web
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                  - name: envoy.filters.http.cors
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                route_config:
                  name: grpc_auth_routes
                  virtual_hosts:
                    - name: auth_service
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: auth_service_grpc
                            max_grpc_timeout: 0s
                          typed_per_filter_config:            # ← CORS policy
                            envoy.filters.http.cors:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.CorsPolicy
                              allow_origin_string_match:
                                - exact: "http://localhost:3000"
                              allow_methods: "POST,OPTIONS"
                              allow_headers: "content-type,x-grpc-web,x-user-agent,authorization"
                              expose_headers: "grpc-status,grpc-message"
                              max_age: "86400"
                              allow_credentials: true

    # ┌─────────────────────────────────────────────────────────────────────┐
    # │ 2) Listener for HubService gRPC-Web (port 8082)                     │
    # └─────────────────────────────────────────────────────────────────────┘
    - name: hub_grpc_web_listener
      address:
        socket_address: { address: 0.0.0.0, port_value: 8082 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: grpc_web_hub
                http_filters:
                  - name: envoy.filters.http.grpc_web
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                  - name: envoy.filters.http.cors
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                route_config:
                  name: grpc_hub_routes
                  virtual_hosts:
                    - name: hub_service
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: hub_service_grpc
                            max_grpc_timeout: 0s
                          typed_per_filter_config:
                            envoy.filters.http.cors:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.CorsPolicy
                              allow_origin_string_match:
                                - exact: "http://localhost:3000"
                              allow_methods: "POST,OPTIONS"
                              allow_headers: "content-type,x-grpc-web,x-user-agent,authorization"
                              expose_headers: "grpc-status,grpc-message"
                              max_age: "86400"
                              allow_credentials: true

    # ┌─────────────────────────────────────────────────────────────────────┐
    # │ 3) Listener for ChatService gRPC-Web (port 8083)                    │
    # └─────────────────────────────────────────────────────────────────────┘
    - name: chat_grpc_web_listener
      address:
        socket_address: { address: 0.0.0.0, port_value: 8083 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: grpc_web_chat
                http_filters:
                  - name: envoy.filters.http.grpc_web
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                  - name: envoy.filters.http.cors
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                route_config:
                  name: grpc_chat_routes
                  virtual_hosts:
                    - name: chat_service
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: chat_service_grpc
                            max_grpc_timeout: 0s
                          typed_per_filter_config:
                            envoy.filters.http.cors:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.CorsPolicy
                              allow_origin_string_match:
                                - exact: "http://localhost:3000"
                              allow_methods: "POST,OPTIONS"
                              allow_headers: "content-type,x-grpc-web,x-user-agent,authorization"
                              expose_headers: "grpc-status,grpc-message"
                              max_age: "86400"
                              allow_credentials: true

  clusters:
    # (clusters unchanged)
    - name: auth_service_grpc
      connect_timeout: 0.25s
      type: STRICT_DNS
      http2_protocol_options: {}
      load_assignment:
        cluster_name: auth_service_grpc
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: auth_service, port_value: 50051 }

    - name: hub_service_grpc
      connect_timeout: 0.25s
      type: STRICT_DNS
      http2_protocol_options: {}
      load_assignment:
        cluster_name: hub_service_grpc
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: hub_service, port_value: 50052 }

    - name: chat_service_grpc
      connect_timeout: 0.25s
      type: STRICT_DNS
      http2_protocol_options: {}
      load_assignment:
        cluster_name: chat_service_grpc
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: chat_service, port_value: 50053 }

admin:
  access_log_path: /dev/null
  address:
    socket_address: { address: 127.0.0.1, port_value: 9901 }
