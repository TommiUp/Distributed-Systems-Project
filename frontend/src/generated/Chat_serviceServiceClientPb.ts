/**
 * @fileoverview gRPC-Web generated client stub for chatservice
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.31.1
// source: chat_service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as chat_service_pb from './chat_service_pb'; // proto import: "chat_service.proto"


export class ChatServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSubscribeChat = new grpcWeb.MethodDescriptor(
    '/chatservice.ChatService/SubscribeChat',
    grpcWeb.MethodType.SERVER_STREAMING,
    chat_service_pb.Init,
    chat_service_pb.ServerEnvelope,
    (request: chat_service_pb.Init) => {
      return request.serializeBinary();
    },
    chat_service_pb.ServerEnvelope.deserializeBinary
  );

  subscribeChat(
    request: chat_service_pb.Init,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<chat_service_pb.ServerEnvelope> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/chatservice.ChatService/SubscribeChat',
      request,
      metadata || {},
      this.methodDescriptorSubscribeChat);
  }

  methodDescriptorSendChannelMsg = new grpcWeb.MethodDescriptor(
    '/chatservice.ChatService/SendChannelMsg',
    grpcWeb.MethodType.UNARY,
    chat_service_pb.ChannelMsg,
    chat_service_pb.Empty,
    (request: chat_service_pb.ChannelMsg) => {
      return request.serializeBinary();
    },
    chat_service_pb.Empty.deserializeBinary
  );

  sendChannelMsg(
    request: chat_service_pb.ChannelMsg,
    metadata?: grpcWeb.Metadata | null): Promise<chat_service_pb.Empty>;

  sendChannelMsg(
    request: chat_service_pb.ChannelMsg,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: chat_service_pb.Empty) => void): grpcWeb.ClientReadableStream<chat_service_pb.Empty>;

  sendChannelMsg(
    request: chat_service_pb.ChannelMsg,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: chat_service_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chatservice.ChatService/SendChannelMsg',
        request,
        metadata || {},
        this.methodDescriptorSendChannelMsg,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chatservice.ChatService/SendChannelMsg',
    request,
    metadata || {},
    this.methodDescriptorSendChannelMsg);
  }

  methodDescriptorSendPrivateMsg = new grpcWeb.MethodDescriptor(
    '/chatservice.ChatService/SendPrivateMsg',
    grpcWeb.MethodType.UNARY,
    chat_service_pb.PrivateMsg,
    chat_service_pb.Empty,
    (request: chat_service_pb.PrivateMsg) => {
      return request.serializeBinary();
    },
    chat_service_pb.Empty.deserializeBinary
  );

  sendPrivateMsg(
    request: chat_service_pb.PrivateMsg,
    metadata?: grpcWeb.Metadata | null): Promise<chat_service_pb.Empty>;

  sendPrivateMsg(
    request: chat_service_pb.PrivateMsg,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: chat_service_pb.Empty) => void): grpcWeb.ClientReadableStream<chat_service_pb.Empty>;

  sendPrivateMsg(
    request: chat_service_pb.PrivateMsg,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: chat_service_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chatservice.ChatService/SendPrivateMsg',
        request,
        metadata || {},
        this.methodDescriptorSendPrivateMsg,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chatservice.ChatService/SendPrivateMsg',
    request,
    metadata || {},
    this.methodDescriptorSendPrivateMsg);
  }

  methodDescriptorGetHistory = new grpcWeb.MethodDescriptor(
    '/chatservice.ChatService/GetHistory',
    grpcWeb.MethodType.UNARY,
    chat_service_pb.HistoryReq,
    chat_service_pb.HistoryRes,
    (request: chat_service_pb.HistoryReq) => {
      return request.serializeBinary();
    },
    chat_service_pb.HistoryRes.deserializeBinary
  );

  getHistory(
    request: chat_service_pb.HistoryReq,
    metadata?: grpcWeb.Metadata | null): Promise<chat_service_pb.HistoryRes>;

  getHistory(
    request: chat_service_pb.HistoryReq,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: chat_service_pb.HistoryRes) => void): grpcWeb.ClientReadableStream<chat_service_pb.HistoryRes>;

  getHistory(
    request: chat_service_pb.HistoryReq,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: chat_service_pb.HistoryRes) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/chatservice.ChatService/GetHistory',
        request,
        metadata || {},
        this.methodDescriptorGetHistory,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/chatservice.ChatService/GetHistory',
    request,
    metadata || {},
    this.methodDescriptorGetHistory);
  }

}

