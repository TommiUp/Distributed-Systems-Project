/**
 * @fileoverview gRPC-Web generated client stub for hubservice
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.31.1
// source: hub_service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as hub_service_pb from './hub_service_pb'; // proto import: "hub_service.proto"


export class HubServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorEnterHub = new grpcWeb.MethodDescriptor(
    '/hubservice.HubService/EnterHub',
    grpcWeb.MethodType.UNARY,
    hub_service_pb.EnterHubRequest,
    hub_service_pb.EnterHubResponse,
    (request: hub_service_pb.EnterHubRequest) => {
      return request.serializeBinary();
    },
    hub_service_pb.EnterHubResponse.deserializeBinary
  );

  enterHub(
    request: hub_service_pb.EnterHubRequest,
    metadata?: grpcWeb.Metadata | null): Promise<hub_service_pb.EnterHubResponse>;

  enterHub(
    request: hub_service_pb.EnterHubRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: hub_service_pb.EnterHubResponse) => void): grpcWeb.ClientReadableStream<hub_service_pb.EnterHubResponse>;

  enterHub(
    request: hub_service_pb.EnterHubRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: hub_service_pb.EnterHubResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/hubservice.HubService/EnterHub',
        request,
        metadata || {},
        this.methodDescriptorEnterHub,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/hubservice.HubService/EnterHub',
    request,
    metadata || {},
    this.methodDescriptorEnterHub);
  }

  methodDescriptorLogout = new grpcWeb.MethodDescriptor(
    '/hubservice.HubService/Logout',
    grpcWeb.MethodType.UNARY,
    hub_service_pb.LogoutRequest,
    hub_service_pb.LogoutResponse,
    (request: hub_service_pb.LogoutRequest) => {
      return request.serializeBinary();
    },
    hub_service_pb.LogoutResponse.deserializeBinary
  );

  logout(
    request: hub_service_pb.LogoutRequest,
    metadata?: grpcWeb.Metadata | null): Promise<hub_service_pb.LogoutResponse>;

  logout(
    request: hub_service_pb.LogoutRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: hub_service_pb.LogoutResponse) => void): grpcWeb.ClientReadableStream<hub_service_pb.LogoutResponse>;

  logout(
    request: hub_service_pb.LogoutRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: hub_service_pb.LogoutResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/hubservice.HubService/Logout',
        request,
        metadata || {},
        this.methodDescriptorLogout,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/hubservice.HubService/Logout',
    request,
    metadata || {},
    this.methodDescriptorLogout);
  }

  methodDescriptorListChannels = new grpcWeb.MethodDescriptor(
    '/hubservice.HubService/ListChannels',
    grpcWeb.MethodType.UNARY,
    hub_service_pb.Empty,
    hub_service_pb.ChannelListResponse,
    (request: hub_service_pb.Empty) => {
      return request.serializeBinary();
    },
    hub_service_pb.ChannelListResponse.deserializeBinary
  );

  listChannels(
    request: hub_service_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<hub_service_pb.ChannelListResponse>;

  listChannels(
    request: hub_service_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: hub_service_pb.ChannelListResponse) => void): grpcWeb.ClientReadableStream<hub_service_pb.ChannelListResponse>;

  listChannels(
    request: hub_service_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: hub_service_pb.ChannelListResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/hubservice.HubService/ListChannels',
        request,
        metadata || {},
        this.methodDescriptorListChannels,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/hubservice.HubService/ListChannels',
    request,
    metadata || {},
    this.methodDescriptorListChannels);
  }

}

