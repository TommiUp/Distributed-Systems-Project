// source: chat_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.chatservice.ChannelMsg', null, global);
goog.exportSymbol('proto.chatservice.ClientEnvelope', null, global);
goog.exportSymbol('proto.chatservice.ClientEnvelope.PayloadCase', null, global);
goog.exportSymbol('proto.chatservice.Empty', null, global);
goog.exportSymbol('proto.chatservice.HistoryReq', null, global);
goog.exportSymbol('proto.chatservice.HistoryRes', null, global);
goog.exportSymbol('proto.chatservice.Init', null, global);
goog.exportSymbol('proto.chatservice.JoinChannel', null, global);
goog.exportSymbol('proto.chatservice.LeaveChannel', null, global);
goog.exportSymbol('proto.chatservice.PrivateMsg', null, global);
goog.exportSymbol('proto.chatservice.ServerEnvelope', null, global);
goog.exportSymbol('proto.chatservice.ServerEnvelope.PayloadCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatservice.Init = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatservice.Init, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatservice.Init.displayName = 'proto.chatservice.Init';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatservice.ChannelMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatservice.ChannelMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatservice.ChannelMsg.displayName = 'proto.chatservice.ChannelMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatservice.PrivateMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatservice.PrivateMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatservice.PrivateMsg.displayName = 'proto.chatservice.PrivateMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatservice.ServerEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.chatservice.ServerEnvelope.oneofGroups_);
};
goog.inherits(proto.chatservice.ServerEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatservice.ServerEnvelope.displayName = 'proto.chatservice.ServerEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatservice.JoinChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatservice.JoinChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatservice.JoinChannel.displayName = 'proto.chatservice.JoinChannel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatservice.LeaveChannel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatservice.LeaveChannel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatservice.LeaveChannel.displayName = 'proto.chatservice.LeaveChannel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatservice.ClientEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.chatservice.ClientEnvelope.oneofGroups_);
};
goog.inherits(proto.chatservice.ClientEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatservice.ClientEnvelope.displayName = 'proto.chatservice.ClientEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatservice.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatservice.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatservice.Empty.displayName = 'proto.chatservice.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatservice.HistoryReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatservice.HistoryReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatservice.HistoryReq.displayName = 'proto.chatservice.HistoryReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatservice.HistoryRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chatservice.HistoryRes.repeatedFields_, null);
};
goog.inherits(proto.chatservice.HistoryRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chatservice.HistoryRes.displayName = 'proto.chatservice.HistoryRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatservice.Init.prototype.toObject = function(opt_includeInstance) {
  return proto.chatservice.Init.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatservice.Init} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.Init.toObject = function(includeInstance, msg) {
  var f, obj = {
token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatservice.Init}
 */
proto.chatservice.Init.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatservice.Init;
  return proto.chatservice.Init.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatservice.Init} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatservice.Init}
 */
proto.chatservice.Init.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatservice.Init.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatservice.Init.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatservice.Init} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.Init.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.chatservice.Init.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatservice.Init} returns this
 */
proto.chatservice.Init.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatservice.ChannelMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.chatservice.ChannelMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatservice.ChannelMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.ChannelMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
body: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatservice.ChannelMsg}
 */
proto.chatservice.ChannelMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatservice.ChannelMsg;
  return proto.chatservice.ChannelMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatservice.ChannelMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatservice.ChannelMsg}
 */
proto.chatservice.ChannelMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatservice.ChannelMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatservice.ChannelMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatservice.ChannelMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.ChannelMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.chatservice.ChannelMsg.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatservice.ChannelMsg} returns this
 */
proto.chatservice.ChannelMsg.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string body = 2;
 * @return {string}
 */
proto.chatservice.ChannelMsg.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatservice.ChannelMsg} returns this
 */
proto.chatservice.ChannelMsg.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatservice.PrivateMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.chatservice.PrivateMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatservice.PrivateMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.PrivateMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
recipient: jspb.Message.getFieldWithDefault(msg, 1, ""),
body: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatservice.PrivateMsg}
 */
proto.chatservice.PrivateMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatservice.PrivateMsg;
  return proto.chatservice.PrivateMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatservice.PrivateMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatservice.PrivateMsg}
 */
proto.chatservice.PrivateMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatservice.PrivateMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatservice.PrivateMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatservice.PrivateMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.PrivateMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string recipient = 1;
 * @return {string}
 */
proto.chatservice.PrivateMsg.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatservice.PrivateMsg} returns this
 */
proto.chatservice.PrivateMsg.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string body = 2;
 * @return {string}
 */
proto.chatservice.PrivateMsg.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatservice.PrivateMsg} returns this
 */
proto.chatservice.PrivateMsg.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.chatservice.ServerEnvelope.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.chatservice.ServerEnvelope.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  NOTICE: 1,
  PM: 2,
  CM: 3,
  HISTORY_RES: 4
};

/**
 * @return {proto.chatservice.ServerEnvelope.PayloadCase}
 */
proto.chatservice.ServerEnvelope.prototype.getPayloadCase = function() {
  return /** @type {proto.chatservice.ServerEnvelope.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.chatservice.ServerEnvelope.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatservice.ServerEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.chatservice.ServerEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatservice.ServerEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.ServerEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
notice: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
pm: (f = msg.getPm()) && proto.chatservice.PrivateMsg.toObject(includeInstance, f),
cm: (f = msg.getCm()) && proto.chatservice.ChannelMsg.toObject(includeInstance, f),
historyRes: (f = msg.getHistoryRes()) && proto.chatservice.HistoryRes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatservice.ServerEnvelope}
 */
proto.chatservice.ServerEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatservice.ServerEnvelope;
  return proto.chatservice.ServerEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatservice.ServerEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatservice.ServerEnvelope}
 */
proto.chatservice.ServerEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotice(value);
      break;
    case 2:
      var value = new proto.chatservice.PrivateMsg;
      reader.readMessage(value,proto.chatservice.PrivateMsg.deserializeBinaryFromReader);
      msg.setPm(value);
      break;
    case 3:
      var value = new proto.chatservice.ChannelMsg;
      reader.readMessage(value,proto.chatservice.ChannelMsg.deserializeBinaryFromReader);
      msg.setCm(value);
      break;
    case 4:
      var value = new proto.chatservice.HistoryRes;
      reader.readMessage(value,proto.chatservice.HistoryRes.deserializeBinaryFromReader);
      msg.setHistoryRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatservice.ServerEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatservice.ServerEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatservice.ServerEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.ServerEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPm();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.chatservice.PrivateMsg.serializeBinaryToWriter
    );
  }
  f = message.getCm();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.chatservice.ChannelMsg.serializeBinaryToWriter
    );
  }
  f = message.getHistoryRes();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.chatservice.HistoryRes.serializeBinaryToWriter
    );
  }
};


/**
 * optional string notice = 1;
 * @return {string}
 */
proto.chatservice.ServerEnvelope.prototype.getNotice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatservice.ServerEnvelope} returns this
 */
proto.chatservice.ServerEnvelope.prototype.setNotice = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.chatservice.ServerEnvelope.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.chatservice.ServerEnvelope} returns this
 */
proto.chatservice.ServerEnvelope.prototype.clearNotice = function() {
  return jspb.Message.setOneofField(this, 1, proto.chatservice.ServerEnvelope.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chatservice.ServerEnvelope.prototype.hasNotice = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PrivateMsg pm = 2;
 * @return {?proto.chatservice.PrivateMsg}
 */
proto.chatservice.ServerEnvelope.prototype.getPm = function() {
  return /** @type{?proto.chatservice.PrivateMsg} */ (
    jspb.Message.getWrapperField(this, proto.chatservice.PrivateMsg, 2));
};


/**
 * @param {?proto.chatservice.PrivateMsg|undefined} value
 * @return {!proto.chatservice.ServerEnvelope} returns this
*/
proto.chatservice.ServerEnvelope.prototype.setPm = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.chatservice.ServerEnvelope.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chatservice.ServerEnvelope} returns this
 */
proto.chatservice.ServerEnvelope.prototype.clearPm = function() {
  return this.setPm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chatservice.ServerEnvelope.prototype.hasPm = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChannelMsg cm = 3;
 * @return {?proto.chatservice.ChannelMsg}
 */
proto.chatservice.ServerEnvelope.prototype.getCm = function() {
  return /** @type{?proto.chatservice.ChannelMsg} */ (
    jspb.Message.getWrapperField(this, proto.chatservice.ChannelMsg, 3));
};


/**
 * @param {?proto.chatservice.ChannelMsg|undefined} value
 * @return {!proto.chatservice.ServerEnvelope} returns this
*/
proto.chatservice.ServerEnvelope.prototype.setCm = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.chatservice.ServerEnvelope.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chatservice.ServerEnvelope} returns this
 */
proto.chatservice.ServerEnvelope.prototype.clearCm = function() {
  return this.setCm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chatservice.ServerEnvelope.prototype.hasCm = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional HistoryRes history_res = 4;
 * @return {?proto.chatservice.HistoryRes}
 */
proto.chatservice.ServerEnvelope.prototype.getHistoryRes = function() {
  return /** @type{?proto.chatservice.HistoryRes} */ (
    jspb.Message.getWrapperField(this, proto.chatservice.HistoryRes, 4));
};


/**
 * @param {?proto.chatservice.HistoryRes|undefined} value
 * @return {!proto.chatservice.ServerEnvelope} returns this
*/
proto.chatservice.ServerEnvelope.prototype.setHistoryRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.chatservice.ServerEnvelope.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chatservice.ServerEnvelope} returns this
 */
proto.chatservice.ServerEnvelope.prototype.clearHistoryRes = function() {
  return this.setHistoryRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chatservice.ServerEnvelope.prototype.hasHistoryRes = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatservice.JoinChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.chatservice.JoinChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatservice.JoinChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.JoinChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatservice.JoinChannel}
 */
proto.chatservice.JoinChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatservice.JoinChannel;
  return proto.chatservice.JoinChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatservice.JoinChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatservice.JoinChannel}
 */
proto.chatservice.JoinChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatservice.JoinChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatservice.JoinChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatservice.JoinChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.JoinChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.chatservice.JoinChannel.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatservice.JoinChannel} returns this
 */
proto.chatservice.JoinChannel.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatservice.LeaveChannel.prototype.toObject = function(opt_includeInstance) {
  return proto.chatservice.LeaveChannel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatservice.LeaveChannel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.LeaveChannel.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatservice.LeaveChannel}
 */
proto.chatservice.LeaveChannel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatservice.LeaveChannel;
  return proto.chatservice.LeaveChannel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatservice.LeaveChannel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatservice.LeaveChannel}
 */
proto.chatservice.LeaveChannel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatservice.LeaveChannel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatservice.LeaveChannel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatservice.LeaveChannel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.LeaveChannel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.chatservice.LeaveChannel.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatservice.LeaveChannel} returns this
 */
proto.chatservice.LeaveChannel.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.chatservice.ClientEnvelope.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.chatservice.ClientEnvelope.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  INIT: 1,
  JOIN: 2,
  LEAVE: 3,
  CM: 4,
  PM: 5
};

/**
 * @return {proto.chatservice.ClientEnvelope.PayloadCase}
 */
proto.chatservice.ClientEnvelope.prototype.getPayloadCase = function() {
  return /** @type {proto.chatservice.ClientEnvelope.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.chatservice.ClientEnvelope.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatservice.ClientEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.chatservice.ClientEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatservice.ClientEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.ClientEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
init: (f = msg.getInit()) && proto.chatservice.Init.toObject(includeInstance, f),
join: (f = msg.getJoin()) && proto.chatservice.JoinChannel.toObject(includeInstance, f),
leave: (f = msg.getLeave()) && proto.chatservice.LeaveChannel.toObject(includeInstance, f),
cm: (f = msg.getCm()) && proto.chatservice.ChannelMsg.toObject(includeInstance, f),
pm: (f = msg.getPm()) && proto.chatservice.PrivateMsg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatservice.ClientEnvelope}
 */
proto.chatservice.ClientEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatservice.ClientEnvelope;
  return proto.chatservice.ClientEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatservice.ClientEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatservice.ClientEnvelope}
 */
proto.chatservice.ClientEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chatservice.Init;
      reader.readMessage(value,proto.chatservice.Init.deserializeBinaryFromReader);
      msg.setInit(value);
      break;
    case 2:
      var value = new proto.chatservice.JoinChannel;
      reader.readMessage(value,proto.chatservice.JoinChannel.deserializeBinaryFromReader);
      msg.setJoin(value);
      break;
    case 3:
      var value = new proto.chatservice.LeaveChannel;
      reader.readMessage(value,proto.chatservice.LeaveChannel.deserializeBinaryFromReader);
      msg.setLeave(value);
      break;
    case 4:
      var value = new proto.chatservice.ChannelMsg;
      reader.readMessage(value,proto.chatservice.ChannelMsg.deserializeBinaryFromReader);
      msg.setCm(value);
      break;
    case 5:
      var value = new proto.chatservice.PrivateMsg;
      reader.readMessage(value,proto.chatservice.PrivateMsg.deserializeBinaryFromReader);
      msg.setPm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatservice.ClientEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatservice.ClientEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatservice.ClientEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.ClientEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.chatservice.Init.serializeBinaryToWriter
    );
  }
  f = message.getJoin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.chatservice.JoinChannel.serializeBinaryToWriter
    );
  }
  f = message.getLeave();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.chatservice.LeaveChannel.serializeBinaryToWriter
    );
  }
  f = message.getCm();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.chatservice.ChannelMsg.serializeBinaryToWriter
    );
  }
  f = message.getPm();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.chatservice.PrivateMsg.serializeBinaryToWriter
    );
  }
};


/**
 * optional Init init = 1;
 * @return {?proto.chatservice.Init}
 */
proto.chatservice.ClientEnvelope.prototype.getInit = function() {
  return /** @type{?proto.chatservice.Init} */ (
    jspb.Message.getWrapperField(this, proto.chatservice.Init, 1));
};


/**
 * @param {?proto.chatservice.Init|undefined} value
 * @return {!proto.chatservice.ClientEnvelope} returns this
*/
proto.chatservice.ClientEnvelope.prototype.setInit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.chatservice.ClientEnvelope.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chatservice.ClientEnvelope} returns this
 */
proto.chatservice.ClientEnvelope.prototype.clearInit = function() {
  return this.setInit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chatservice.ClientEnvelope.prototype.hasInit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional JoinChannel join = 2;
 * @return {?proto.chatservice.JoinChannel}
 */
proto.chatservice.ClientEnvelope.prototype.getJoin = function() {
  return /** @type{?proto.chatservice.JoinChannel} */ (
    jspb.Message.getWrapperField(this, proto.chatservice.JoinChannel, 2));
};


/**
 * @param {?proto.chatservice.JoinChannel|undefined} value
 * @return {!proto.chatservice.ClientEnvelope} returns this
*/
proto.chatservice.ClientEnvelope.prototype.setJoin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.chatservice.ClientEnvelope.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chatservice.ClientEnvelope} returns this
 */
proto.chatservice.ClientEnvelope.prototype.clearJoin = function() {
  return this.setJoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chatservice.ClientEnvelope.prototype.hasJoin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LeaveChannel leave = 3;
 * @return {?proto.chatservice.LeaveChannel}
 */
proto.chatservice.ClientEnvelope.prototype.getLeave = function() {
  return /** @type{?proto.chatservice.LeaveChannel} */ (
    jspb.Message.getWrapperField(this, proto.chatservice.LeaveChannel, 3));
};


/**
 * @param {?proto.chatservice.LeaveChannel|undefined} value
 * @return {!proto.chatservice.ClientEnvelope} returns this
*/
proto.chatservice.ClientEnvelope.prototype.setLeave = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.chatservice.ClientEnvelope.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chatservice.ClientEnvelope} returns this
 */
proto.chatservice.ClientEnvelope.prototype.clearLeave = function() {
  return this.setLeave(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chatservice.ClientEnvelope.prototype.hasLeave = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ChannelMsg cm = 4;
 * @return {?proto.chatservice.ChannelMsg}
 */
proto.chatservice.ClientEnvelope.prototype.getCm = function() {
  return /** @type{?proto.chatservice.ChannelMsg} */ (
    jspb.Message.getWrapperField(this, proto.chatservice.ChannelMsg, 4));
};


/**
 * @param {?proto.chatservice.ChannelMsg|undefined} value
 * @return {!proto.chatservice.ClientEnvelope} returns this
*/
proto.chatservice.ClientEnvelope.prototype.setCm = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.chatservice.ClientEnvelope.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chatservice.ClientEnvelope} returns this
 */
proto.chatservice.ClientEnvelope.prototype.clearCm = function() {
  return this.setCm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chatservice.ClientEnvelope.prototype.hasCm = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PrivateMsg pm = 5;
 * @return {?proto.chatservice.PrivateMsg}
 */
proto.chatservice.ClientEnvelope.prototype.getPm = function() {
  return /** @type{?proto.chatservice.PrivateMsg} */ (
    jspb.Message.getWrapperField(this, proto.chatservice.PrivateMsg, 5));
};


/**
 * @param {?proto.chatservice.PrivateMsg|undefined} value
 * @return {!proto.chatservice.ClientEnvelope} returns this
*/
proto.chatservice.ClientEnvelope.prototype.setPm = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.chatservice.ClientEnvelope.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chatservice.ClientEnvelope} returns this
 */
proto.chatservice.ClientEnvelope.prototype.clearPm = function() {
  return this.setPm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chatservice.ClientEnvelope.prototype.hasPm = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatservice.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.chatservice.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatservice.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatservice.Empty}
 */
proto.chatservice.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatservice.Empty;
  return proto.chatservice.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatservice.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatservice.Empty}
 */
proto.chatservice.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatservice.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatservice.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatservice.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatservice.HistoryReq.prototype.toObject = function(opt_includeInstance) {
  return proto.chatservice.HistoryReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatservice.HistoryReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.HistoryReq.toObject = function(includeInstance, msg) {
  var f, obj = {
channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatservice.HistoryReq}
 */
proto.chatservice.HistoryReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatservice.HistoryReq;
  return proto.chatservice.HistoryReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatservice.HistoryReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatservice.HistoryReq}
 */
proto.chatservice.HistoryReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatservice.HistoryReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatservice.HistoryReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatservice.HistoryReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.HistoryReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.chatservice.HistoryReq.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chatservice.HistoryReq} returns this
 */
proto.chatservice.HistoryReq.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.chatservice.HistoryReq.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.chatservice.HistoryReq} returns this
 */
proto.chatservice.HistoryReq.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chatservice.HistoryRes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatservice.HistoryRes.prototype.toObject = function(opt_includeInstance) {
  return proto.chatservice.HistoryRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatservice.HistoryRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.HistoryRes.toObject = function(includeInstance, msg) {
  var f, obj = {
itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.chatservice.ChannelMsg.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatservice.HistoryRes}
 */
proto.chatservice.HistoryRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatservice.HistoryRes;
  return proto.chatservice.HistoryRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatservice.HistoryRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatservice.HistoryRes}
 */
proto.chatservice.HistoryRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chatservice.ChannelMsg;
      reader.readMessage(value,proto.chatservice.ChannelMsg.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatservice.HistoryRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatservice.HistoryRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatservice.HistoryRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatservice.HistoryRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.chatservice.ChannelMsg.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChannelMsg items = 1;
 * @return {!Array<!proto.chatservice.ChannelMsg>}
 */
proto.chatservice.HistoryRes.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.chatservice.ChannelMsg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.chatservice.ChannelMsg, 1));
};


/**
 * @param {!Array<!proto.chatservice.ChannelMsg>} value
 * @return {!proto.chatservice.HistoryRes} returns this
*/
proto.chatservice.HistoryRes.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.chatservice.ChannelMsg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.chatservice.ChannelMsg}
 */
proto.chatservice.HistoryRes.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.chatservice.ChannelMsg, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.chatservice.HistoryRes} returns this
 */
proto.chatservice.HistoryRes.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


goog.object.extend(exports, proto.chatservice);
